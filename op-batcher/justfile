import '../just/go.just'

# Build ldflags string
_LDFLAGSSTRING := "'" + trim(
    "-X main.GitCommit=" + GITCOMMIT + " " + \
    "-X main.GitDate=" + GITDATE + " " + \
    "-X main.Version=" + VERSION + " " + \
    "") + "'"

BINARY := "./bin/op-batcher"

# Build op-batcher binary
op-batcher: (go_build BINARY "./cmd" "-ldflags" _LDFLAGSSTRING)

# Clean build artifacts
clean:
    rm -f {{BINARY}}

# Run tests
test: test-failpoint
    just go_test "./..."

# Failpoint tests rely on https://github.com/pingcap/failpoint, which are identified by a _FailpointTest suffix to the test name.
# We run them using a separate GOCACHE because they inject code into the compiled binaries, which could interfere with other tests or normal builds.
test-failpoint:
    GOCACHE=/tmp/failpoint-cache just go_test "./batcher/..." "-toolexec" "$(mise which failpoint-toolexec)" "-run" ".*_FailpointTest$"

[private]
batcher_fuzz_task FUZZ TIME='10s': (go_fuzz FUZZ TIME "./batcher")

# Run fuzzing tests
fuzz:
    printf "%s\n" \
        "FuzzChannelConfig_CheckTimeout" \
        "FuzzDurationZero" \
        "FuzzDurationTimeoutMaxChannelDuration" \
        "FuzzDurationTimeoutZeroMaxChannelDuration" \
        "FuzzChannelCloseTimeout" \
        "FuzzChannelZeroCloseTimeout" \
        "FuzzSeqWindowClose" \
        "FuzzSeqWindowZeroTimeoutClose" \
    | parallel -j {{PARALLEL_JOBS}} {{just_executable()}} batcher_fuzz_task {}
